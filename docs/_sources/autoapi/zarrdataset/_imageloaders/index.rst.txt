:py:mod:`zarrdataset._imageloaders`
===================================

.. py:module:: zarrdataset._imageloaders


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   zarrdataset._imageloaders.ImageBase
   zarrdataset._imageloaders.ImageLoader
   zarrdataset._imageloaders.ImageCollection



Functions
~~~~~~~~~

.. autoapisummary::

   zarrdataset._imageloaders.image2array



Attributes
~~~~~~~~~~

.. autoapisummary::

   zarrdataset._imageloaders.TIFFFILE_SUPPORT


.. py:data:: TIFFFILE_SUPPORT
   :value: True

   

.. py:function:: image2array(arr_src: Union[str, zarr.Group, zarr.Array, numpy.ndarray], data_group: Union[str, int, None] = None, zarr_store: Union[zarr.storage.Store, None] = None)

   Open images stored in zarr format or any image format that can be opened
   by PIL as an array.

   :param arr_src: The image filename, or zarr object, to be loaded as a zarr array.
   :type arr_src: Union[str, zarr.Group, zarr.Array, np.ndarray]
   :param data_group: The group within the zarr file from where the array is loaded. This is
                      used only when the input file is a zarr object.
   :type data_group: Union[str, int, None]
   :param zarr_store: The class used to open the zarr file. Leave it as None to let this
                      function to use the most suitable depending to the data location
                      (s3/remote: FSStore, local disk: DirectoryStore).
   :type zarr_store: Union[zarr.storage.Store, None]

   :returns: * **arr** (*zarr.Array*) -- The image as a zarr array.
             * **store** (*None, zarr.storage.Store, PIL.Image, tifffile.ZarrTiffStore*) -- A connection to the image file that is kept open until the dataset is
               not needed, so this connection can be closed properly.


.. py:class:: ImageBase(shape: Iterable[int], chunk_size: Union[Iterable[int], None] = None, source_axes: str = '', mode: str = '')

   Bases: :py:obj:`object`

   .. py:property:: shape
      :type: Iterable[int]


   .. py:property:: chunk_size
      :type: Iterable[int]


   .. py:property:: scale
      :type: dict


   .. py:attribute:: arr

      

   .. py:attribute:: spatial_axes
      :value: 'ZYX'

      

   .. py:attribute:: source_axes

      

   .. py:attribute:: axes

      

   .. py:attribute:: mode
      :value: ''

      

   .. py:attribute:: permute_order

      

   .. py:attribute:: _store

      

   .. py:attribute:: _new_axes
      :value: ''

      

   .. py:attribute:: _drop_axes
      :value: ''

      

   .. py:attribute:: _scale

      

   .. py:attribute:: _shape

      

   .. py:attribute:: _spatial_reference_shape

      

   .. py:attribute:: _spatial_reference_axes

      

   .. py:attribute:: _chunk_size

      

   .. py:attribute:: _cached_coords

      

   .. py:attribute:: _image_func

      

   .. py:method:: _iscached(coords)


   .. py:method:: _cache_chunk(index)


   .. py:method:: __getitem__(index: Union[slice, tuple, dict]) -> numpy.ndarray


   .. py:method:: _compute_shapes()


   .. py:method:: rescale(spatial_reference_shape: Union[Iterable[int], None] = None, spatial_reference_axes: Union[str, None] = None) -> None

      Rescale this image using the `spatial_reference_shape` as reference.

      :param spatial_reference_shape: Reference image shape used to match extracted regions from this
                                      image (e.g., when calling __getitem__, or ImageBase[slice(...)])
      :type spatial_reference_shape: Union[Iterable[int], None]
      :param spatial_reference_axes: Rescale only this axes from the image, keeping the rest unscaled.
      :type spatial_reference_axes: Union[str, None]



.. py:class:: ImageLoader(filename: str, source_axes: str, data_group: Union[str, None] = None, axes: Union[str, None] = None, roi: Union[str, slice, Iterable[slice], None] = None, image_func: Union[Callable, None] = None, zarr_store: Union[zarr.storage.Store, None] = None, spatial_axes: str = 'ZYX', mode: str = '')

   Bases: :py:obj:`ImageBase`

   Image lazy loader class.

   Opens the zarr file, or any image that can be open by TiffFile or PIL, as a
   Zarr array.

   :param filename:
   :type filename: str
   :param source_axes:
   :type source_axes: str
   :param data_group:
   :type data_group: Union[str, None]
   :param axes:
   :type axes: Union[str, None]
   :param roi:
   :type roi: Union[str, slice, Iterable[slice], None]
   :param image_func:
   :type image_func: Union[Callable, None]
   :param zarr_store:
   :type zarr_store: Union[zarr.storage.Store, None]
   :param spatial_axes:
   :type spatial_axes: str
   :param mode:
   :type mode: str

   .. py:method:: __del__()



.. py:class:: ImageCollection(collection_args: dict, spatial_axes: str = 'ZYX')

   Bases: :py:obj:`object`

   A class to contain a collection of inputs from different modalities.

   This is used to match images with their respective labels and masks.

   :param collection_args: Collection arguments containing specifications to open `images`,
                           `masks`, `labels`, etc.
   :type collection_args: dict
   :param spatial_axes: Spatial axes of the dataset, which are used to match different
                        modalities using as reference these axes from the `images` collection.
   :type spatial_axes: str

   .. py:method:: _generate_mask()


   .. py:method:: reset_scales() -> None

      Reset the scales between data modalities to match the `images`
      collection shape on the `spatial_axes` only.


   .. py:method:: __getitem__(index)



