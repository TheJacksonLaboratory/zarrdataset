zarrdataset._utils
==================

.. py:module:: zarrdataset._utils


Functions
---------

.. autoapisummary::

   zarrdataset._utils.parse_rois
   zarrdataset._utils.parse_metadata
   zarrdataset._utils.map_axes_order
   zarrdataset._utils.select_axes
   zarrdataset._utils.connect_s3
   zarrdataset._utils.isconsolidated
   zarrdataset._utils.scale_coords
   zarrdataset._utils.translate2roi


Module Contents
---------------

.. py:function:: parse_rois(rois_str: Iterable[str]) -> List[slice]

   Parse a list of strings defining ROIs.

   :param rois_str: A list of regions of interest parsed from the input string.
   :type rois_str: Iterable[str]

   :returns: **rois** -- A list of slices to select regions from arrays.
   :rtype: List[slice]


.. py:function:: parse_metadata(filename: str, default_source_axes: str, default_data_group: Union[str, int, None] = None, default_axes: Union[str, None] = None, default_rois: Union[Iterable[slice], None] = None, override_meta: bool = False) -> List[dict]

   Parse the filename, data groups, axes ordering, ROIs from `filename`.

   The different fields must be separated by a semicolon (;).
   After parsed the filename, data group, and axes, any number of ROIs are
   accepted; however, this parser only supports rectangle shaped ROIs.

   :param filename: Path to the image.
   :type filename: str
   :param default_source_axes: Default source axes ordering used when no axes are present in the
                               filename string.
   :type default_source_axes: src
   :param default_data_group: Default data group used when data group is present in the filename
                              string.
   :type default_data_group: Union[str, int, None]
   :param default_axes: Default output axes ordering used when no target axes are present in
                        the filename string.
   :type default_axes: Union[str, None]
   :param default_rois: Default roi used when no rois are present in the filename string.
   :type default_rois: Union[Iterable[slice], None]
   :param override_meta: Whether to override the values parsed from the filename with the
                         defaults or not.
   :type override_meta: bool

   :returns: **parsed_metadata** -- A list of parsed values from the filename. A single element is
             retrieved for each ROI in the filename.
   :rtype: list of dicts

   .. rubric:: Notes

   The parsed metadata dictionary has the following structure.
   fn : str
       The parsed filename
   data_group: str or None
       The group for zarr images, or key for tiff files
   source_axes: str or None
       The orignal axes ordering
   axes: str or None
       The axes ordering as it being used from the array (may involve
       permuting, dropping unused axes, and creating new axes)
   rois : list of slices
       A list of regions of interest parsed from the input string.

   Data groups are expected for files with hierarchical structure, like zarr
   and tiff files. This is usually found on pyramid-like files, where the main
   image is stored in group `0/0`, and any downsampling version of that are
   stored in subgroups `0/1', '0/2`, etc. If the file does not have any
   hierarchical structure, leave the space in blank.

   Original axes and permuted desired order are expected as
   `source axes order`:`target axes order`. Axes identifiers can appear only
   once. Different number of target axes from the original number of axes can
   be requested. For more axes, dummy axes will be added in the position of
   the new requested axes. For less axes, the undefined axes will be
   positioned arbitrarly before those specified axes. It is responsability of
   the user to make remove unused axes with the a corresponding ROI.
   If no reordering is required, do not add the colon (:) on that section.

   ROIs are spected as (start coordinate):(lenght of the ROI). Coordinates and
   lenghts are expected for each one of the axes in the image, since all ROIs
   are taken before any axes reordering. Negative values can be used to select
   all indices of that axis.

   Example 1:
   test_file.zarr;0/0;TCZYX:YXC;(0,0,0,0,0):(1,-1,1,-1,-1)

   This will parse a ROI from `test_file.zarr` from the group `0/0`, which is
   expetect to have axes ordering as Time (T), Channels (C), Depth (Z),
   Height (Y), and Width (X), into an axes order of Height, Width and
   Channels. Index `0` is selected from both Time (T) and Depth(Z) axes.

   Example 2:
   test_file.zarr;1;CYX;(0,0,0):(-1,4,3);(0,5,5):(-1,2,2)

   This will parse a ROI from `test_file.zarr` from the array at group `1`,
   which is expetect to have axes ordering as Channels (C), Height (Y), and
   Width (X). From that array, two ROIs are extracted, one from coordinates
   (0, 0) with a shape (4, 3), and other from coordinates (5, 5) with shape
   (2, 2). Both ROIs use all the available channels.

   Example 3:
   test_array.zarr;;CYX:YXC

   The `test_array.zarr` file stores an array without any hierarchy, so no
   data group is required. Only the channels axes is required to be moved from
   the first position to the last one. Because no ROIs are defined, the full
   the array will be used.


.. py:function:: map_axes_order(source_axes: str, target_axes: str = 'YX')

   Get the indices of a set of axes that reorders it to match another set
   of axes.

   :param source_axes: Set of axes to be reordered to match `target_axes`.
   :type source_axes: str
   :param target_axes: Set of axes in the desired order.
   :type target_axes: str

   :returns: **transpose_order** -- The indices order in `source_axes` that makes it match `target_axes`.
             If `source_axes` has more axes than `target_axes`, the unspecified axes
             will be moved to the front of the ordering, leaving the `target_axes`
             at the trailing positions.
   :rtype: list of ints

   .. rubric:: Notes

   The axes must be passed as a string in format `XYZ`, and cannot be appear
   more than once.


.. py:function:: select_axes(source_axes: str, axes_selection: dict)

   Get a sliced selection of axes from a zarr array.

   :param source_axes: Ordered set of axes on the original array.
   :type source_axes: str
   :param axes_selection: A relationship of what index to take from each specified axes.
                          Unspecified axes are fully retrieved.
   :type axes_selection: dict

   :returns: * **sel_slices** (*tuple of slices*) -- A tuple of slices that can be used to select the indices of the
               specified axes from an array.
             * **unfixed_axes** (*str*) -- A string with the ordered set of remaining axes of the array.

   .. rubric:: Notes

   The axes must be passed as a string in format `XYZ`, and cannot be appear
   more than once.


.. py:function:: connect_s3(filename_sample: str)

   Stablish a connection with a S3 bucket.

   :param filename_sample: A sample filename containing the S3 end-point and bucket names.
   :type filename_sample: str

   :returns: **s3_obj** -- A dictionary containing the bucket name and a boto3 client connected to
             the S3 bucket. If the filename does not points to a S3 bucket, this
             returns None.
   :rtype: dict of None


.. py:function:: isconsolidated(arr_src: Union[str, zarr.Group, zarr.Array])

   Check if the zarr file is consolidated so it is faster to open.

   :param arr_src: The image filename, or zarr object, to be checked.
   :type arr_src: Union[str, zarr.Group, zarr.Array]

   :returns: **is_consolidated** -- Whether zarr array in `arr_src` is consolidated or not.
   :rtype: bool


.. py:function:: scale_coords(selection_range: Iterable[slice], scale: Union[float, Iterable[float]] = 1.0)

   Scale a set of top-lefts, bottom-rights coordinates, in any dimension,
   by `scale` factor.

   :param selection_range: The selection range from an n-dimensional array to scale. This can be a
                           range (start, end), single index, or None, defining the range of
                           indices taken from each axis.
   :type selection_range: Iterable[slice]
   :param scale: The factor to rescale the selection range of each axes. If a single
                 value is passed, all axes are rescaled by that factor.
   :type scale: Union[float, Iterable[float]]

   :returns: **scaled_selection_range** -- The scaled selection range as a tuple of slices
   :rtype: tuple of slices


.. py:function:: translate2roi(index: dict, roi: tuple, source_axes: str, axes: str)

